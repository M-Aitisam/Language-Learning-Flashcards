@page "/flash"
@inject VocabularyService VocabularyService
@using Language_Learning_Flashcards.Data


<div class="container mt-5">
    <h3>Flashcard</h3>

    <div class="form-group">
        <label for="languageSelect">Select Language</label>
        <select id="languageSelect" class="form-control" @onchange="UpdateLanguage">
            <option value="">Select Language</option>
            @foreach (var language in availableLanguages)
            {
                <option value="@language">@language</option>
            }
        </select>
    </div>

    @if (currentWord != null)
    {
        <div class="card mt-3">
            <div class="card-body text-center">
                @if (showWord)
                {
                    <h5 class="card-title">@currentWord.Word</h5>
                }
                else
                {
                    <p class="card-text">@currentWord.Translation</p>
                }
            </div>
            <button class="btn btn-primary btn-block" @onclick="FlipCard">Flip</button>
        </div>

        <div class="mt-3 d-flex justify-content-between">
            <button class="btn btn-success" @onclick="MarkAsLearned" disabled="@(!CanMarkAsLearned)">Mark as Learned</button>
            <button class="btn btn-secondary" @onclick="SkipWord">Skip</button>
        </div>
    }
</div>

@code {
    private string selectedLanguage = string.Empty;
    private VocabularyWord? currentWord;
    private Queue<VocabularyWord> wordsQueue = new();
    private bool showWord = true;
    private List<string> availableLanguages = new();

    protected override void OnInitialized()
    {
        var allWords = VocabularyService.GetAllWords();
        availableLanguages = allWords.Select(w => w.Language).Where(lang => lang != null).Distinct().ToList();

        if (availableLanguages.Any())
        {
            selectedLanguage = availableLanguages.First();
            UpdateWordsQueue();
        }
    }

    private void UpdateLanguage(ChangeEventArgs e)
    {
        selectedLanguage = e.Value?.ToString() ?? string.Empty;
        UpdateWordsQueue();
    }

    private void UpdateWordsQueue()
    {
        if (!string.IsNullOrWhiteSpace(selectedLanguage))
        {
            var words = VocabularyService.GetWordsByLanguage(selectedLanguage);
            wordsQueue = new Queue<VocabularyWord>(words);
            LoadNextWord();
        }
        else
        {
            wordsQueue.Clear();
            currentWord = null;
        }
    }

    private void LoadNextWord()
    {
        if (wordsQueue.Count > 0)
        {
            currentWord = wordsQueue.Dequeue();
            showWord = true;
        }
        else
        {
            currentWord = null;
        }
    }

    private void FlipCard() => showWord = !showWord;

    private void MarkAsLearned()
    {
        if (currentWord != null)
        {
            VocabularyService.MarkAsLearned(currentWord.WordId);
            LoadNextWord();
        }
    }

    private void SkipWord() => LoadNextWord();

    private bool CanMarkAsLearned => currentWord != null;
}
